import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";

import { type RouterOutputs, api } from "@/utils/api";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

import { CreatePost } from "@/components/CreatePost";
import { SiteHeader } from "@/components/SiteHeader";
import { Avatar, AvatarImage } from "@/components/ui/avatar";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingSpinner } from "@/components/LoadingSpinner";

dayjs.extend(relativeTime);

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { author, post } = props;
  return (
    <Card>
      <CardHeader className="flex flex-row">
        <Avatar>
          <AvatarImage
            src={
              author?.imageUrl ??
              `https://api.dicebear.com/6.x/notionists-neutral/svg?seed=${author?.id}`
            }
          />
        </Avatar>
        <CardTitle className="px-4 text-sm text-slate-700">
          <span>{author?.firstName} Â· </span>
          <span className="">{dayjs(post.createdAt).fromNow()}</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p>{post.content}</p>
      </CardContent>
    </Card>
  );
};

export default function Home() {
  const { data, isLoading } = api.posts.getAll.useQuery();

  const user = useUser();

  if (isLoading) {
    // TODO: Add proper loading UI...
    return (
      <div className="flex h-screen w-screen items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <SiteHeader />
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {!user.isSignedIn && (
            <SignInButton>
              <Button variant={"outline"}>Sign in with Clerk</Button>
            </SignInButton>
          )}
          {user.isSignedIn && (
            <SignOutButton>
              <Button variant={"outline"}>Sign out with Clerk</Button>
            </SignOutButton>
          )}

          {user.isSignedIn && <CreatePost />}

          <div className="w-full max-w-2xl">
            {data?.map((fullPost) => {
              return (
                <div className="py-2" key={fullPost.post.id}>
                  <PostView {...fullPost} />
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </>
  );
}
